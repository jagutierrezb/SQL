# For this project I downloaded data for Kaggle, then I created a table to insert Spotify data into. Finally, I performed analytics on the data using SQL. 

#1. Creating the table

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#2. Inserting the Spotify Data for a .csv file into the table.

#3. Then, I explored the data using the following queries in SQL.

#3.1. Top 5 artists by danceability

SELECT artist_name, danceability 
FROM Spotifydata
GROUP BY artist_name
ORDER BY danceability DESC
LIMIT 5

#3.2. Top 5 artist with the most songs in the Top 50 songs of 2021

SELECT artist_name, COUNT(*) AS Songs_in_top50
FROM Spotifydata
GROUP BY artist_name
ORDER BY Songs_in_top50 DESC
LIMIT 5

#3.3. Top 5 artists with the longest duration of their songs in the Top 50

SELECT artist_name, SUM(duration_ms) AS Miliseconds
FROM Spotifydata
GROUP BY artist_name
ORDER BY Miliseconds DESC
LIMIT 5

#3.4. What is the highest ranked song the 3 artists with the most songs in the Top 50 songs of 2021 have in the top and what's their ranking?

SELECT id, artist_name, track_name
FROM Spotifydata
WHERE artist_name
    LIKE "%Olivia Rodrigo%" OR artist_name
    LIKE "%Doja Cat%" OR artist_name
    LIKE "%Bad Bunny%"
GROUP BY artist_name
ORDER BY id

#3.5. How many songs used the Discovery Mode in Spotify?

SELECT mode AS Discovery_Mode, COUNT(*) AS Songs_Count
FROM Spotifydata
WHERE mode = 1

#3.6. Songs that contain the words "me" or the word "you" in their title.

SELECT COUNT(*) AS Contains_Me_And_You
FROM Spotifydata
WHERE track_name 
LIKE "%me%" OR track_name LIKE "%you%"

#3.7. Number of songs that have other artists featured on the song.

SELECT COUNT(*)
FROM Spotifydata
WHERE track_name LIKE "%feat%"
OR track_name LIKE "%ft.%"
OR track_name LIKE "%(with%"

#3.8. Top 5 most popular songs that have other artists featured on the song.

SELECT artist_name, track_name, popularity
FROM Spotifydata
WHERE track_name LIKE "%feat%"
OR track_name LIKE "%ft.%"
OR track_name LIKE "%(with%"
ORDER BY popularity DESC
LIMIT 5

#3.9. Top 10 longest songs in minutes.

SELECT artist_name, track_name, ROUND(duration_ms*1./60000,2) AS Duration_Min
FROM Spotifydata
ORDER BY Duration_Min DESC
LIMIT 10

#3.10. Songs classified by how they compare to the average duration in minutes.

SELECT track_name, artist_name, ROUND(duration_ms*1./60000,2) AS Duration_Min, 
CASE
    WHEN ROUND(duration_ms*1./60000,2) > (SELECT AVG(duration_ms)*1./60000 FROM Spotifydata) THEN "Above Average"
    WHEN ROUND(duration_ms*1./60000,2) = (SELECT AVG(duration_ms)*1./60000 FROM Spotifydata) THEN "Average"
    ELSE "Below Average"
END AS "Average_Comparison"
FROM Spotifydata
GROUP BY track_name
ORDER BY Duration_Min DESC

#3.11. Songs classified by how they compare to the average energy.

SELECT ROUND(AVG(energy),3) 
FROM Spotifydata

SELECT id, track_name, artist_name, ROUND(energy,3) AS Energy,
CASE
    WHEN Energy > (SELECT ROUND(AVG(energy),3) FROM BIT_DB.Spotifydata) THEN "Above Average"
    WHEN Energy = (SELECT ROUND(AVG(energy),3) FROM BIT_DB.Spotifydata) THEN "Average"
    ELSE "Below Average"
END AS "Avg_Energy_Comparison"
FROM Spotifydata
GROUP BY track_name
ORDER BY id ASC
LIMIT 10

#3.12. Average popularity of the songs which popularity rate is above 90.

SELECT AVG(popularity)
FROM Spotifydata
WHERE popularity > 90

#3.13. What is the maximum possible popularity?

SELECT MAX(popularity) FROM Spotifydata

#3.14. From the most popular songs, which is the most danceable and its duration in minutes?

SELECT artist_name, track_name, danceability, popularity, ROUND(duration_ms*1./60000,2) AS Duration_Min
FROM Spotifydata
WHERE popularity >= (SELECT MAX(popularity) FROM Spotifydata)
ORDER BY danceability DESC
LIMIT 1

#3.15. From the most popular songs, which is the loudest and its duration in minutes?

SELECT artist_name, track_name, loudness, popularity, ROUND(duration_ms*1./60000,2) AS Duration_Min
FROM Spotifydata
WHERE popularity >= (SELECT MAX(popularity) FROM Spotifydata)
ORDER BY loudness DESC
LIMIT 1

#3.16. What is the loudness of the least popular song and its duration in minutes?

SELECT artist_name, track_name, loudness, popularity, ROUND(duration_ms*1./60000,2) AS Duration_Min
FROM Spotifydata
WHERE popularity <= (SELECT MIN(popularity) FROM Spotifydata)
ORDER BY loudness ASC
LIMIT 1

#3.16. What are the top 5 songs by speechiness?

SELECT artist_name, track_name, speechiness
FROM Spotifydata
ORDER BY speechiness DESC
LIMIT 5

#3.17. What is the average and max speechiness of Bad Bunny's songs?

SELECT AVG(speechiness), MAX(speechiness)
FROM Spotifydata
WHERE artist_name="Bad Bunny"

#3.18. Query the top songs to see if they are above or below the average speechiness.

SELECT track_name, artist_name, speechiness, 
CASE
    WHEN speechiness > (SELECT AVG(speechiness) FROM Spotifydata) THEN "Above Average"
    WHEN speechiness = (SELECT AVG(speechiness) FROM Spotifydata) THEN "Average"
    ELSE "Below Average"
END AS "Average_Comparison"
FROM Spotifydata
GROUP BY track_name
ORDER BY speechiness DESC

#3.19. Query the artists with an average popularity of 90 or above, show their names, average popularity and label them as "Top Stars".

WITH SpotifyTemp AS (
SELECT artist_name, AVG(popularity) AS Average_Popularity
    FROM Spotifydata
    GROUP BY artist_name
) 

SELECT artist_name, Average_Popularity, 'Top Star' AS tag    
FROM SpotifyTemp
WHERE Average_Popularity >= 90
